using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MovieDatabase.Model;

namespace MovieDatabase
{
    /// <summary>
    /// CrewMember class is used to represent the two types of crew members: Actor and Director.
    /// </summary>
    public abstract class CrewMember : Person
    {
        public int Id { get; set; }
        public string ImageLink { get; set; }
        public List<Review> Reviews { get; set; }

        public CrewMember(string firstName, string lastName, string imageLink) : base(firstName, lastName)
        {
            if (imageLink == null)
            {
                throw new ArgumentNullException("The imageLink argument cannot be null.");
            }
            Id = -1; // The Id can only be generated by the database
            Reviews = new List<Review>();
            ImageLink = imageLink;
        }

        /// <summary>
        /// Add a review to the list of reviews.
        /// </summary>
        /// <param name="review">The review to add.</param>
        /// <exception cref="ArgumentNullException">Exception thrown when the review argument is null.</exception>
        public void AddReview(Review review)
        {
            if (review == null)
            {
                throw new ArgumentNullException("The review argument cannot be null.");
            }
            Reviews.Add(review);
        }

        /// <summary>
        /// Remove a review from the list of reviews.
        /// </summary>
        /// <param name="review">The review to remove.</param>
        /// <exception cref="ArgumentNullException">Exception thrown when the review argument is null.</exception>
        public void RemoveReview(Review review)
        {
            if (review == null)
            {
                throw new ArgumentNullException("The review argument cannot be null.");
            }
            Reviews.Remove(review);
        }

        /// <summary>
        /// Calculates the media rating by taking the average of all the reviews
        /// </summary>
        /// <returns>the average rating</returns>
        public double GetPopularity()
        {
            if (Reviews == null || Reviews.Count == 0)
            {
                return -1;
            }

            double total = 0.0;
            foreach (var review in Reviews)
            {
                total += review.Rating;
            }

            return Math.Round(total / Reviews.Count, 1, MidpointRounding.AwayFromZero);
        }

        /// <summary>
        /// Checks whether an object is equal to this crew member.
        /// </summary>
        /// <param name="obj">The object to compare.</param>
        /// <returns>A boolean indicating whether the object provided is equal to this crew member.</returns>
        public override bool Equals(object? obj)
        {
            return obj is CrewMember member &&
                   base.Equals(obj) &&
                   FirstName == member.FirstName &&
                   LastName == member.LastName &&
                   Id == member.Id &&
                   EqualityComparer<List<Review>>.Default.Equals(Reviews, member.Reviews) &&
                   ImageLink == member.ImageLink;
        }

        /// <summary>
        /// Generates a hashcode for this crew member.
        /// </summary>
        /// <returns>The hashcode of this crew member.</returns>
        public override int GetHashCode()
        {
            return HashCode.Combine(base.GetHashCode(), FirstName, LastName, Id, Reviews, ImageLink);
        }

        /// <summary>
        /// Generate a string representation of this crew member.
        /// </summary>
        /// <returns>A string representation of this crew member.</returns>
        public override string? ToString()
        {
            return $"CrewMember{{Id: {Id}, Reviews: {String.Join(",", Reviews)}, ImageLink: {ImageLink}}}";
        }
    }
}
